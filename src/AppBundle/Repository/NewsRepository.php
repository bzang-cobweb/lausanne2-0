<?php

namespace AppBundle\Repository;

use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends ModelRepository
{

    /**
     * @param array $criteria
     * @param array $orderBy
     * @param int $limit
     * @param int $offset
     * @return array
     * @throws \Exception
     */
    public function findByLike(array $criteria = [], array $orderBy = [], $limit = 0, $offset = -1)
    {
        $q = $this->createQueryBuilder('m');
        $where = '';

        // criteria
        foreach($criteria as $property => $value){
            if($property != 'championship' && $where) {
                $where .= " AND ";
            }

            if($property == 'search') {
                $where .= $this->getSearchWhere($value['fields']);
                $q->setParameter('search', '%' . $value['text'] . '%');
            } else{
                if($property == 'championship') {
                    $q->innerJoin('m.championship', 'c', 'WITH', 'c.id = :championship');
                } else {
                    $where .= '(m.' . $property . ' = :' . $property . ')';
                }
                $q->setParameter($property, (is_bool($value) ? ($value ? 1 : 0) : $value));
            }
        }

        if($where){
            $q->where($where);
        }

        // order by
        foreach($orderBy as $field => $direction){
            $q->addOrderBy('m.' . $field, $direction);
        }
        $q->addOrderBy( 'm.id', $direction);

        // limit
        if($limit > 0){
            $q->setMaxResults($limit);
        }

        // offset
        if($offset >= 0){
            $q->setFirstResult($offset);
        }

        //die($q->getQuery()->getDQL());



        try {
            $news = $q->getQuery()->getResult();
            if($offset >= 0){
                $p = new Paginator($q);
                return [$news, $p->count()];
            }
        } catch (NoResultException $e) {
            throw new \Exception(sprintf('Unable to filter table by like'), null, 0, $e);
        }

        return $news;
    }
}
