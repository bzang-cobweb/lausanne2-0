<?php

namespace AppBundle\Repository;

use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * PlayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRepository extends ModelRepository
{
    public function standing($championshipId, $season, $limit = null)  {
        $period = $this->period($season);

        $q = $this->createQueryBuilder('p')
            ->select('p.id, p.firstname, p.lastname, p.trigram, CONCAT(SUBSTRING(p.firstname, 1, 1), :separator, p.lastname) AS name')
            ->innerJoin('AppBundle\Entity\TeamPlayer', 'tp', 'WITH',
                '(p = tp.player) AND (
                (tp.createdAt <= :createdAt AND tp.updatedAt IS NULL) OR
                (tp.createdAt <= :createdAt AND tp.updatedAt IS NOT NULL AND tp.updatedAt <= :updatedAt) OR
                (tp.createdAt >= :createdAt AND tp.createdAt <= :updatedAt))')
            ->innerJoin('AppBundle\Entity\ChampionshipTeam', 'ct', 'WITH', 'tp.team = ct.team')
            ->innerJoin('AppBundle\Entity\Championship', 'c', 'WITH', 'c = ct.championship AND c.id = :id')
            ->addSelect('(SELECT COALESCE(SUM(mp.goal), 0) FROM AppBundle\Entity\Match as m
             INNER JOIN AppBundle\Entity\MatchPlayer as mp WITH m = mp.match WHERE
             m.season = :season AND m.championship = c AND mp.player = p) AS goal'
            )
            ->addSelect('(SELECT COALESCE(SUM(mp1.autoGoal), 0) FROM AppBundle\Entity\Match as m1
             INNER JOIN AppBundle\Entity\MatchPlayer as mp1 WITH m1 = mp1.match WHERE
             m1.season = :season AND m1.championship = c AND mp1.player = p) AS auto_goal'
            )
            ->addSelect('(SELECT COALESCE(SUM(mp2.yellowCard), 0) FROM AppBundle\Entity\Match as m2
             INNER JOIN AppBundle\Entity\MatchPlayer as mp2 WITH m2 = mp2.match WHERE
             m2.season = :season AND m2.championship = c AND mp2.player = p) AS yellow'
            )
            ->addSelect('(SELECT COALESCE(SUM(mp3.redCard), 0) FROM AppBundle\Entity\Match as m3
             INNER JOIN AppBundle\Entity\MatchPlayer as mp3 WITH m3 = mp3.match WHERE
             m3.season = :season AND m3.championship = c AND mp3.player = p) AS red'
            )
            ->addSelect('(SELECT COALESCE(SUM(mp4.assist), 0) FROM AppBundle\Entity\Match as m4
             INNER JOIN AppBundle\Entity\MatchPlayer as mp4 WITH m4 = mp4.match WHERE
             m4.season = :season AND m4.championship = c AND mp4.player = p) AS assist'
            )
            ->where('p.deleted = 0 AND c.deleted = 0')
            ->setParameter('id', $championshipId)
            ->setParameter('season', $season)
            ->setParameter('createdAt', $period['createdAt'])
            ->setParameter('updatedAt', $period['updatedAt'])
            ->setParameter('separator', '. ')
            ->groupBy('p.id')
            ->addOrderBy('goal', 'DESC')
            ->addOrderBy('p.firstname', 'ASC')
            ->addOrderBy('p.lastname', 'ASC')
            ->addOrderBy('p.id', 'DESC');

        // limit
        if($limit){
            $q->setMaxResults($limit);
        }

        try {
            $players = $q->getQuery()->getResult();
        } catch (NoResultException $e) {
            throw new NoResultException(sprintf('Unable to order teams'), null, 0, $e);
        }

        return $players;
    }

    /**
     * @param int $teamId
     * @param string $season
     * @return array
     * @throws NoResultException
     */
    public function findByTeamSeason($teamId, $season)  {
        $period = $this->period($season);

        $q = $this->createQueryBuilder('p')
            ->innerJoin('AppBundle\Entity\TeamPlayer', 'tp', 'WITH',
                '(p = tp.player) AND (
                (tp.createdAt <= :createdAt AND tp.updatedAt IS NULL) OR
                (tp.createdAt <= :createdAt AND tp.updatedAt IS NOT NULL AND tp.updatedAt <= :updatedAt) OR
                (tp.createdAt >= :createdAt AND tp.createdAt <= :updatedAt))')
            ->innerJoin('AppBundle\Entity\Team', 't', 'WITH', 't = tp.team AND t.id = :id')
            ->setParameter('id', $teamId)
            ->setParameter('createdAt', $period['createdAt'])
            ->setParameter('updatedAt', $period['updatedAt'])
            ->groupBy('p.id')
            ->addOrderBy('p.firstname', 'ASC')
            ->addOrderBy('p.lastname', 'ASC')
            ->addOrderBy('p.id', 'DESC');

        try {
            //die($q->getDQL());
            $players = $q->getQuery()->getResult();
        } catch (NoResultException $e) {
            throw new NoResultException(sprintf('Unable to find players by team and season'), null, 0, $e);
        }

        return $players;
    }
}
