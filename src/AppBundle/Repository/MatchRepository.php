<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Model;
use AppBundle\Entity\Season;
use AppBundle\Entity\SeasonPlayer;
use AppBundle\Entity\SeasonTeam;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MatchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MatchRepository extends ModelRepository
{
    /**
     * @param array $criteria
     * @param array $orderBy
     * @param int $limit
     * @param int $offset
     * @return array
     * @throws \Exception
     */
    public function findByLike(array $criteria = [], array $orderBy = [], $limit = 0, $offset = -1)
    {
        $q = $this->createQueryBuilder('m')
            ->innerJoin('m.championship', 'c')
            ->innerJoin('m.home', 'h')
            ->innerJoin('m.visitor', 'v');

        $where = '';

        // criteria
        foreach($criteria as $property => $value){
            if($where) {
                $where .= " AND ";
            }
            if($property == 'championship'){
                $where .= '(c.id = :' . $property . ')';
            } elseif ($property == 'team'){
                $where .= '(h.id = :' . $property . ' OR v.id = :' . $property . ')';
            } elseif ($property == 'scheduledAt'){
                $where .= '(m.scheduledAt <= :' . $property . ')';
            } else {
                $where .= '(m.' . $property . ' = :' . $property . ')';
            }
            $q->setParameter($property, (is_bool($value) ? ($value ? 1 : 0) : $value));
        }

        if($where){
            $q->where($where);
        }

        // order by
        $q->addOrderBy( 'm.stage', 'ASC');
        foreach($orderBy as $field => $direction){
            $q->addOrderBy( 'm.' . $field, $direction);
        }
        $q->addOrderBy( 'm.id', $direction);

        // limit
        if($limit > 0){
            $q->setMaxResults($limit);
        }

        // offset
        if($offset >= 0){
            $q->setFirstResult($offset);
        }

        try {
            $matches = $q->getQuery()->getResult();
            if($offset >= 0){
                $p = new Paginator($q);
                return [$matches, $p->count()];
            }
        } catch (NoResultException $e) {
            throw new \Exception(sprintf('Unable to filter table by like'), null, 0, $e);
        }

        return $matches;
    }


    /**
     * @param $id
     * @return mixed
     */
    public function delete($id){
        return $this->createQueryBuilder('m')
            ->delete()
            ->where('m.id IN (' . implode(',', (is_array($id) ? $id : [$id])) . ')')
            ->getQuery()
            ->getSingleScalarResult();
    }

}
